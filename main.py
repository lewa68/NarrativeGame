import requests
import json
import os
import sqlite3
import hashlib
import secrets
import logging
from datetime import datetime, timedelta
from flask import Flask, render_template, request, jsonify, session, redirect, url_for
from werkzeug.security import generate_password_hash, check_password_hash
from mistralai import Mistral

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

API_KEY = os.environ.get("MISTRAL_API_KEY")
MODEL = "mistral-large-latest"

app = Flask(__name__)
app.secret_key = secrets.token_hex(16)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  username TEXT UNIQUE NOT NULL,
                  password_hash TEXT NOT NULL,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞–ø–æ–∫
def create_user_folder(username, user_id):
    folder_name = f"{username}@{user_id}"
    folder_path = os.path.join("user_data", folder_name)
    os.makedirs(folder_path, exist_ok=True)
    os.makedirs(os.path.join(folder_path, "saves"), exist_ok=True)
    os.makedirs(os.path.join(folder_path, "characters"), exist_ok=True)
    os.makedirs(os.path.join(folder_path, "chats"), exist_ok=True)
    return folder_path

def get_user_folder(username, user_id):
    folder_name = f"{username}@{user_id}"
    return os.path.join("user_data", folder_name)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
def login_required(f):
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return jsonify({"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "need_login": True})
        return f(*args, **kwargs)
    decorated_function.__name__ = f.__name__
    return decorated_function

class ContextManager:
    def __init__(self, max_tokens=8000, summary_threshold=15):
        self.max_tokens = max_tokens
        self.summary_threshold = summary_threshold

    def estimate_tokens(self, text):
        """–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ (1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ)"""
        return len(text) // 3

    def create_summary(self, messages):
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        summary_messages = []
        for msg in messages:
            if msg["role"] == "user":
                summary_messages.append(f"–ò–≥—Ä–æ–∫: {msg['content'][:100]}...")
            else:
                summary_messages.append(f"–ì–ú: {msg['content'][:200]}...")

        return {
            "role": "system", 
            "content": f"–†–ï–ó–Æ–ú–ï –ü–†–ï–î–´–î–£–©–ò–• –°–û–ë–´–¢–ò–ô:\n" + "\n".join(summary_messages[-5:])
        }

    def optimize_context(self, conversation_history):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç, –±–∞–ª–∞–Ω—Å–∏—Ä—É—è –ø–æ–ª–Ω–æ—Ç—É –∏ —Ä–∞–∑–º–µ—Ä"""
        if len(conversation_history) <= 6:
            return conversation_history

        total_tokens = sum(self.estimate_tokens(msg["content"]) for msg in conversation_history)

        if total_tokens <= self.max_tokens:
            return conversation_history

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        recent_messages = conversation_history[-8:]
        older_messages = conversation_history[:-8]

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if older_messages:
            summary = self.create_summary(older_messages)
            return [summary] + recent_messages

        return recent_messages

def load_gm_rules():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ì–ú –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open("attached_assets/2. –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≥–µ–π–º –º–∞—Å—Ç–µ—Ä–∞_1751298976539.json", "r", encoding="utf-8") as f:
            rules = json.load(f)
        return rules
    except FileNotFoundError:
        print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –§–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ì–ú –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

def create_gm_system_prompt(rules):
    """–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ì–ú –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª"""
    if not rules:
        return ""

    system_prompt = """–¢—ã - –ì–µ–π–º –ú–∞—Å—Ç–µ—Ä (–ì–ú) –¥–ª—è –Ω–∞—Ä—Ä–∞—Ç–∏–≤–Ω–æ–π —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤–µ—Å—Ç–∏ –∏–≥—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:

–ü–†–ê–í–ò–õ–ê –ò–ì–†–´:
"""

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ JSON
    for category, content in rules["rules"].items():
        system_prompt += f"\n{category.upper().replace('_', ' ')}:\n"
        if isinstance(content, dict):
            for key, value in content.items():
                if isinstance(value, list):
                    system_prompt += f"- {key}: {', '.join(value)}\n"
                else:
                    system_prompt += f"- {key}: {value}\n"
        else:
            system_prompt += f"- {content}\n"

    system_prompt += """
–í–ê–ñ–ù–û:
- –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–≥ '–ì–ú:', —Ç—ã –º–æ–∂–µ—à—å —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å –º–∏—Ä, NPC –∏ –∏—Ö –¥–µ–π—Å—Ç–≤–∏—è
- –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∏—Ö –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç
- –ú–∏—Ä –∂–∏–≤–µ—Ç —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏–≥—Ä–æ–∫–∞
- –í—Å–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
- –°–æ–≥–ª–∞—Å–∏–µ –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""

    return system_prompt

def process_content(content):
    # –ë–æ–ª–µ–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–æ–≤ –º—ã—à–ª–µ–Ω–∏—è
    import re
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ <think>...</think>, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç
    cleaned = re.sub(r'<think>.*?</think>', '', content, flags=re.DOTALL | re.IGNORECASE)
    # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'\n\s*\n', '\n', cleaned)
    cleaned = cleaned.strip()

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º –∏–ª–∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π
    if not cleaned or len(cleaned) < 10:
        return content

    return cleaned

def chat_with_ai(prompt, system_prompt="", conversation_history=[]):
    if not API_KEY:
        return "üîë **–û—à–∏–±–∫–∞**: API –∫–ª—é—á Mistral –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ MISTRAL_API_KEY –≤ Secrets."

    try:
        client = Mistral(api_key=API_KEY)

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_manager = ContextManager()
        optimized_history = context_manager.optimize_context(conversation_history)

        messages = []
        if system_prompt:
            messages.append({"role": "system", "content": system_prompt})

        messages.extend(optimized_history)
        messages.append({"role": "user", "content": prompt})

        chat_response = client.chat.complete(
            model=MODEL,
            messages=messages
        )

        content = chat_response.choices[0].message.content
        processed_content = process_content(content)

        return processed_content

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ Mistral AI: {str(e)}"

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
@app.route('/')
def index():
    if 'user_id' in session:
        return render_template('game.html')
    return render_template('index.html')

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('username', '').strip()
    password = data.get('password', '').strip()

    if not username or not password:
        return jsonify({"error": "–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"})

    if len(username) < 3:
        return jsonify({"error": "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"})

    if len(password) < 6:
        return jsonify({"error": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"})

    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        c.execute("SELECT id FROM users WHERE username = ?", (username,))
        if c.fetchone():
            conn.close()
            return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password_hash = generate_password_hash(password)
        c.execute("INSERT INTO users (username, password_hash) VALUES (?, ?)", 
                 (username, password_hash))
        user_id = c.lastrowid
        conn.commit()
        conn.close()

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        create_user_folder(username, user_id)

        # –õ–æ–≥–∏–Ω–∏–º—Å—è
        session['user_id'] = user_id
        session['username'] = username

        return jsonify({"success": True, "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"})

    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}"})

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username', '').strip()
    password = data.get('password', '').strip()
    remember_me = data.get('remember_me', False)

    if not username or not password:
        return jsonify({"error": "–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"})

    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("SELECT id, password_hash FROM users WHERE username = ?", (username,))
        user = c.fetchone()
        conn.close()

        if not user or not check_password_hash(user[1], password):
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"})

        session['user_id'] = user[0]
        session['username'] = username
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–µ–∫–±–æ–∫—Å–∞
        if remember_me:
            # –°–µ—Å—Å–∏—è –Ω–∞ 30 –¥–Ω–µ–π
            session.permanent = True
            app.permanent_session_lifetime = timedelta(days=30)
        else:
            # –°–µ—Å—Å–∏—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
            session.permanent = False

        return jsonify({"success": True, "message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!"})

    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}"})

@app.route('/logout', methods=['POST'])
def logout():
    session.clear()
    return jsonify({"success": True})

@app.route('/get_user_info', methods=['GET'])
@login_required
def get_user_info():
    return jsonify({
        "username": session['username'],
        "user_id": session['user_id']
    })

@app.route('/get_saves', methods=['GET'])
@login_required
def get_saves():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_folder = get_user_folder(session['username'], session['user_id'])
    saves_folder = os.path.join(user_folder, "saves")

    saves = []
    if os.path.exists(saves_folder):
        for filename in os.listdir(saves_folder):
            if filename.endswith('.json'):
                filepath = os.path.join(saves_folder, filename)
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        save_data = json.load(f)
                    saves.append({
                        "filename": filename[:-5],  # —É–±–∏—Ä–∞–µ–º .json
                        "timestamp": save_data.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        "character_name": save_data.get('character_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂')
                    })
                except:
                    continue

    return jsonify({"saves": saves})

@app.route('/get_characters', methods=['GET'])
@login_required
def get_characters():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_folder = get_user_folder(session['username'], session['user_id'])
    characters_folder = os.path.join(user_folder, "characters")

    characters = []
    if os.path.exists(characters_folder):
        for filename in os.listdir(characters_folder):
            if filename.endswith('.json'):
                filepath = os.path.join(characters_folder, filename)
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        char_data = json.load(f)
                    characters.append({
                        "filename": filename[:-5],  # —É–±–∏—Ä–∞–µ–º .json
                        "name": char_data.get('name', filename[:-5]),
                        "description": char_data.get('description', '')[:100] + '...'
                    })
                except:
                    continue

    return jsonify({"characters": characters})

@app.route('/get_chats', methods=['GET'])
@login_required
def get_chats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö"""
    user_folder = get_user_folder(session['username'], session['user_id'])
    chats_folder = os.path.join(user_folder, "chats")

    if not os.path.exists(chats_folder):
        os.makedirs(chats_folder, exist_ok=True)

    chats = {}
    for filename in os.listdir(chats_folder):
        if filename.endswith('.json'):
            filepath = os.path.join(chats_folder, filename)
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    chat_data = json.load(f)
                
                chat_id = filename[:-5]  # —É–±–∏—Ä–∞–µ–º .json
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –¥–ª—è UI
                character_desc, character_name = get_chat_character(chat_data)
                if character_name:
                    chat_data['character_name'] = character_name
                
                chats[chat_id] = chat_data
            except:
                continue

    # –ï—Å–ª–∏ –Ω–µ—Ç —á–∞—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π
    if not chats:
        default_chat = {
            "name": "–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç",
            "messages": [],
            "character_id": None,
            "created_at": datetime.now().isoformat()
        }
        chats['default'] = default_chat
        save_chat_file('default', default_chat)

    return jsonify({"chats": chats})

# –£–ë–ò–†–ê–ï–ú –ò–ó–ë–´–¢–û–ß–ù–£–Æ –§–£–ù–ö–¶–ò–Æ save_chat - —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
def save_chat_file(chat_id, chat_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ä–µ–∞–ª—å–Ω–æ –Ω—É–∂–Ω–æ)"""
    try:
        user_folder = get_user_folder(session['username'], session['user_id'])
        chats_folder = os.path.join(user_folder, "chats")
        os.makedirs(chats_folder, exist_ok=True)

        filepath = os.path.join(chats_folder, f"{chat_id}.json")
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(chat_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞: {e}")

@app.route('/create_chat', methods=['POST'])
@login_required
def create_chat():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —á–∞—Ç"""
    data = request.get_json()
    chat_name = data.get('chat_name', '–ù–æ–≤—ã–π —á–∞—Ç')
    chat_id = data.get('chat_id', f"chat_{int(datetime.now().timestamp())}")

    chat_data = {
        "name": chat_name,
        "messages": [],
        "character": session.get('character'),
        "character_name": session.get('character_name'),
        "created_at": datetime.now().isoformat()
    }

    save_chat_file(chat_id, chat_data)
    return jsonify({"success": True, "chat_id": chat_id, "chat_data": chat_data})

@app.route('/delete_chat', methods=['POST'])
@login_required
def delete_chat():
    """–£–¥–∞–ª—è–µ—Ç —á–∞—Ç"""
    data = request.get_json()
    chat_id = data.get('chat_id')

    if not chat_id:
        return jsonify({"error": "ID —á–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω"})

    user_folder = get_user_folder(session['username'], session['user_id'])
    filepath = os.path.join(user_folder, "chats", f"{chat_id}.json")

    try:
        if os.path.exists(filepath):
            os.remove(filepath)
            return jsonify({"success": True, "message": "–ß–∞—Ç —É–¥–∞–ª–µ–Ω"})
        else:
            return jsonify({"error": "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"})
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞: {str(e)}"})

@app.route('/start_game', methods=['POST'])
@login_required
def start_game():
    if not API_KEY:
        return jsonify({"error": "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ MISTRAL_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."})

    data = request.get_json()
    chat_id = data.get('chat_id', 'default')
    character = data.get('character')  # –ü–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω —Å—Ä–∞–∑—É

    rules = load_gm_rules()
    system_prompt = create_gm_system_prompt(rules)

    session['conversation_history'] = []
    session['system_prompt'] = system_prompt
    session['current_chat_id'] = chat_id

    # –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if character:
        session['character'] = character
        # –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
        response = chat_with_ai(f"–ù–∞—á–Ω–∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character}", system_prompt, [])
    else:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        chat_data = load_chat_data(chat_id)
        if chat_data and chat_data.get('character'):
            session['character'] = chat_data['character']
            character = chat_data['character']
            response = chat_with_ai(f"–ù–∞—á–Ω–∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character}", system_prompt, [])
        else:
            # –ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - –ø—Ä–æ—Å–∏–º —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å
            response = "üé≠ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!**\n\n–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ."
            session['character'] = None

    if response and response.strip():
        session['conversation_history'] = [
            {"role": "user", "content": "–ù–∞—á–Ω–∏ –∏–≥—Ä—É"},
            {"role": "assistant", "content": response}
        ]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —á–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        update_chat_messages(chat_id, [
            {"role": "user", "content": "–ù–∞—á–Ω–∏ –∏–≥—Ä—É", "timestamp": datetime.now().isoformat()},
            {"role": "assistant", "content": response, "timestamp": datetime.now().isoformat()}
        ])

    return jsonify({"response": response, "game_started": bool(character)})

def load_chat_data(chat_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞"""
    try:
        user_folder = get_user_folder(session['username'], session['user_id'])
        filepath = os.path.join(user_folder, "chats", f"{chat_id}.json")

        if os.path.exists(filepath):
            with open(filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞: {e}")
    return None

def update_chat_messages(chat_id, messages):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ (–¢–û–õ–¨–ö–û –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)"""
    try:
        chat_data = load_chat_data(chat_id)
        if not chat_data:
            chat_data = {
                "name": f"–ß–∞—Ç {chat_id}",
                "messages": [],
                "character": session.get('character'),
                "character_name": None,
                "created_at": datetime.now().isoformat()
            }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        old_count = len(chat_data['messages'])
        chat_data['messages'].extend(messages)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if len(chat_data['messages']) > old_count:
            save_chat_file(chat_id, chat_data)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")

@app.route('/send_message', methods=['POST'])
@login_required
def send_message():
    data = request.get_json()
    user_message = data.get('message', '')
    chat_id = data.get('chat_id', 'default')

    logger.debug(f"send_message –≤—ã–∑–≤–∞–Ω: message='{user_message}', chat_id='{chat_id}'")

    if not user_message:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return jsonify({"error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})

    session['current_chat_id'] = chat_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if session.get('character_creation_mode'):
        logger.debug("–í —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        return create_character_continue(user_message, chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if '—Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' in user_message.lower() or '—Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' in user_message.lower():
        logger.debug("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        return create_character_start(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —á–∞—Ç–µ
    chat_data = load_chat_data(chat_id)
    chat_character, chat_character_name = get_chat_character(chat_data)
    
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —á–∞—Ç–µ: {bool(chat_character)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
    if not chat_character:
        logger.warning("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ")
        return jsonify({
            "response": "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –ù–∞–ø–∏—à–∏—Ç–µ '—Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."
        })

    conversation_history = session.get('conversation_history', [])
    system_prompt = session.get('system_prompt', '')

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    enhanced_prompt = f"{user_message}\n\n[–ü–ï–†–°–û–ù–ê–ñ –ò–ì–†–û–ö–ê: {chat_character}]"

    response = chat_with_ai(enhanced_prompt, system_prompt, conversation_history)

    if response and response.strip():
        conversation_history.extend([
            {"role": "user", "content": user_message},
            {"role": "assistant", "content": response}
        ])
        session['conversation_history'] = conversation_history

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —á–∞—Ç
        update_chat_messages(chat_id, [
            {"role": "user", "content": user_message, "timestamp": datetime.now().isoformat()},
            {"role": "assistant", "content": response, "timestamp": datetime.now().isoformat()}
        ])

    return jsonify({"response": response})

@app.route('/edit_message', methods=['POST'])
@login_required
def edit_message():
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ò–ò"""
    data = request.get_json()
    message_id = data.get('message_id')
    new_content = data.get('new_content', '')
    chat_id = data.get('chat_id', 'default')
    
    if not new_content:
        return jsonify({"error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})
    
    conversation_history = session.get('conversation_history', [])
    system_prompt = session.get('system_prompt', '')
    
    # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message_id < len(conversation_history):
        conversation_history = conversation_history[:message_id]
        conversation_history.append({"role": "user", "content": new_content})
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    character_info = session.get('character')
    if character_info:
        enhanced_prompt = f"{new_content}\n\n[–ü–ï–†–°–û–ù–ê–ñ –ò–ì–†–û–ö–ê: {character_info}]"
    else:
        enhanced_prompt = new_content
    
    response = chat_with_ai(enhanced_prompt, system_prompt, conversation_history[:-1])
    
    if response and response.strip():
        conversation_history.append({"role": "assistant", "content": response})
        session['conversation_history'] = conversation_history
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç
        chat_data = load_chat_data(chat_id)
        if chat_data:
            # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            if message_id < len(chat_data['messages']):
                chat_data['messages'] = chat_data['messages'][:message_id]
            
            chat_data['messages'].extend([
                {"role": "user", "content": new_content, "timestamp": datetime.now().isoformat()},
                {"role": "assistant", "content": response, "timestamp": datetime.now().isoformat()}
            ])
            save_chat_file(chat_id, chat_data)
    
    return jsonify({"response": response})

def create_character_start(chat_id='default'):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    session['character_creation_history'] = []
    session['character_creation_mode'] = True
    session['current_chat_id'] = chat_id

    response = """üé≠ **–°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê**

–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –Ø –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å.

**–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:** –ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –≤ –∫–∞–∫–æ–º –º–∏—Ä–µ –∏–ª–∏ —Å–µ—Ç—Ç–∏–Ω–≥–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–≥—Ä–∞—Ç—å? (—Ñ—ç–Ω—Ç–µ–∑–∏, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å, –∫–∏–±–µ—Ä–ø–∞–Ω–∫, –∫–æ—Å–º–æ—Å –∏ —Ç.–¥.)"""

    return jsonify({
        "response": response,
        "character_creation": True
    })

def create_character_continue(user_input, chat_id='default'):
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    system_prompt = session.get('system_prompt', '')
    creation_history = session.get('character_creation_history', [])

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character_creation_prompt = f"""
{system_prompt}

–†–ï–ñ–ò–ú –°–û–ó–î–ê–ù–ò–Ø –ü–ï–†–°–û–ù–ê–ñ–ê:
–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –∏–≥—Ä–æ–∫—É —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ:
- –ò–º–µ–Ω–∏ –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
- –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ  
- –ù–∞–≤—ã–∫–∞—Ö –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è—Ö
- –°–Ω–∞—Ä—è–∂–µ–Ω–∏–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö

–ö–æ–≥–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ (–ø–æ—Å–ª–µ 4-5 –≤–æ–ø—Ä–æ—Å–æ–≤), –∑–∞–≤–µ—Ä—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
=== –ü–ï–†–°–û–ù–ê–ñ –°–û–ó–î–ê–ù ===
–ò–º—è: [–∏–º—è]
[–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞]
=== –ö–û–ù–ï–¶ –û–ü–ò–°–ê–ù–ò–Ø ===
"""

    response = chat_with_ai(user_input, character_creation_prompt, creation_history)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if "=== –ü–ï–†–°–û–ù–ê–ñ –°–û–ó–î–ê–ù ===" in response:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        start_marker = "=== –ü–ï–†–°–û–ù–ê–ñ –°–û–ó–î–ê–ù ==="
        end_marker = "=== –ö–û–ù–ï–¶ –û–ü–ò–°–ê–ù–ò–Ø ==="

        start_idx = response.find(start_marker) + len(start_marker)
        end_idx = response.find(end_marker)

        if end_idx > start_idx:
            character_description = response[start_idx:end_idx].strip()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            character_name = "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"
            lines = character_description.split('\n')
            for line in lines:
                if line.startswith('–ò–º—è:'):
                    character_name = line.replace('–ò–º—è:', '').strip()
                    break

            session['character'] = character_description
            session['character_creation_mode'] = False
            session.pop('character_creation_history', None)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
            character_id = save_character_to_file(character_description, character_name)

            # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç —Å ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            chat_data = load_chat_data(chat_id)
            if chat_data:
                chat_data['character_id'] = character_id
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è
                chat_data.pop('character', None)
                chat_data.pop('character_name', None)
                save_chat_file(chat_id, chat_data)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —á–∞—Ç
            update_chat_messages(chat_id, [
                {"role": "user", "content": user_input, "timestamp": datetime.now().isoformat()},
                {"role": "assistant", "content": response, "timestamp": datetime.now().isoformat()}
            ])

            return jsonify({
                "response": response,
                "character_created": True,
                "character": character_description,
                "character_name": character_name
            })

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
    creation_history.extend([
        {"role": "user", "content": user_input},
        {"role": "assistant", "content": response}
    ])
    session['character_creation_history'] = creation_history

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —á–∞—Ç
    update_chat_messages(chat_id, [
        {"role": "user", "content": user_input, "timestamp": datetime.now().isoformat()},
        {"role": "assistant", "content": response, "timestamp": datetime.now().isoformat()}
    ])

    return jsonify({"response": response, "character_created": False})

def save_character_to_file(character_description, character_name=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ñ–∞–π–ª"""
    try:
        if not character_name:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            lines = character_description.split('\n')
            character_name = "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"
            for line in lines:
                if line.startswith('–ò–º—è:'):
                    character_name = line.replace('–ò–º—è:', '').strip()
                    break

        user_folder = get_user_folder(session['username'], session['user_id'])
        characters_folder = os.path.join(user_folder, "characters")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        character_id = f"char_{int(datetime.now().timestamp() * 1000)}"

        character_data = {
            "id": character_id,
            "name": character_name,
            "description": character_description,
            "created_at": datetime.now().isoformat()
        }

        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –ë–ï–ó —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ü–∏—Ñ—Ä
        safe_name = "".join(c for c in character_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
        filename = f"{safe_name}.json"

        with open(os.path.join(characters_folder, filename), 'w', encoding='utf-8') as f:
            json.dump(character_data, f, ensure_ascii=False, indent=2)

        return character_id  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
        return None

def get_character_by_id(character_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        user_folder = get_user_folder(session['username'], session['user_id'])
        characters_folder = os.path.join(user_folder, "characters")
        
        # –ò—â–µ–º —Ñ–∞–π–ª —Å –Ω—É–∂–Ω—ã–º ID
        for filename in os.listdir(characters_folder):
            if filename.endswith('.json'):
                filepath = os.path.join(characters_folder, filename)
                with open(filepath, 'r', encoding='utf-8') as f:
                    char_data = json.load(f)
                
                if char_data.get('id') == character_id:
                    return char_data
        
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID {character_id}: {e}")
        return None

def get_chat_character(chat_data):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —á–∞—Ç–∞"""
    if not chat_data:
        return None, None
    
    character_id = chat_data.get('character_id')
    if character_id and character_id != 'None':
        char_data = get_character_by_id(character_id)
        if char_data:
            return char_data['description'], char_data['name']
    
    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —á–∞—Ç–∞–º–∏
    old_character = chat_data.get('character')
    old_name = chat_data.get('character_name')
    if old_character:
        return old_character, old_name
    
    return None, None

@app.route('/load_character', methods=['POST'])
@login_required
def load_character():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –≤ —á–∞—Ç"""
    data = request.get_json()
    filename = data.get('filename')
    chat_id = data.get('chat_id', 'default')

    logger.debug(f"load_character –≤—ã–∑–≤–∞–Ω: filename='{filename}', chat_id='{chat_id}'")

    if not filename:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        return jsonify({"error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞"})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    chat_data = load_chat_data(chat_id)
    if chat_data and chat_data.get('character_id'):
        logger.warning(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –≤—ã–±—Ä–∞–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        return jsonify({"error": "–ü–µ—Ä—Å–æ–Ω–∞–∂ –¥–ª—è —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω"})

    user_folder = get_user_folder(session['username'], session['user_id'])
    filepath = os.path.join(user_folder, "characters", f"{filename}.json")

    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            character_data = json.load(f)

        character_id = character_data.get('id')
        character_name = character_data.get('name', filename)
        character_description = character_data['description']

        logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {character_name} (ID: {character_id})")

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
        if not character_id:
            character_id = f"char_{int(datetime.now().timestamp() * 1000)}"
            # –ü–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –Ω–æ–≤—ã–º ID
            with open(filepath, 'w', encoding='utf-8') as f:
                character_data['id'] = character_id
                json.dump(character_data, f, ensure_ascii=False, indent=2)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —á–∞—Ç
        if not chat_data:
            chat_data = {
                "name": f"–ß–∞—Ç {character_name}",
                "messages": [],
                "character_id": character_id,
                "created_at": datetime.now().isoformat()
            }
        else:
            chat_data['character_id'] = character_id
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            chat_data.pop('character', None)
            chat_data.pop('character_name', None)

        save_chat_file(chat_id, chat_data)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ì–ú –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        rules = load_gm_rules()
        system_prompt = create_gm_system_prompt(rules)
        session['system_prompt'] = system_prompt

        logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_name}' (ID: {character_id}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —á–∞—Ç—É {chat_id}")

        return jsonify({
            "success": True,
            "character": character_description,
            "character_name": character_name,
            "message": f"–ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_name}' –≤—ã–±—Ä–∞–Ω"
        })

    except FileNotFoundError:
        return jsonify({"error": "–§–∞–π–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"})
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {str(e)}"})

def create_chat_name_from_response(response):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞ –ò–ò"""
    import re
    # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∏ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞
    clean_response = re.sub(r'[*#_\-\[\]()]', '', response)
    words = clean_response.split()[:4]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å–ª–æ–≤–∞
    chat_name = ' '.join(words)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(chat_name) > 30:
        chat_name = chat_name[:27] + '...'
    
    return chat_name or "–ù–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ"

@app.route('/start_game_with_character', methods=['POST'])
@login_required
def start_game_with_character():
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º"""
    data = request.get_json()
    chat_id = data.get('chat_id', 'default')

    logger.debug(f"start_game_with_character –≤—ã–∑–≤–∞–Ω –¥–ª—è chat_id='{chat_id}'")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    chat_data = load_chat_data(chat_id)
    character, character_name = get_chat_character(chat_data)
    
    if not character:
        logger.error(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ {chat_id}")
        return jsonify({"error": "–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –≤—ã–±—Ä–∞–Ω"})
    
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º: {character_name}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ì–ú
    rules = load_gm_rules()
    system_prompt = create_gm_system_prompt(rules)
    session['system_prompt'] = system_prompt

    # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
    enhanced_prompt = f"–ù–∞—á–Ω–∏ –∏–≥—Ä—É\n\n[–ü–ï–†–°–û–ù–ê–ñ –ò–ì–†–û–ö–ê: {character}]"
    response = chat_with_ai(enhanced_prompt, system_prompt, [])

    if response and response.strip():
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞
        chat_name = create_chat_name_from_response(response)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        chat_data['name'] = chat_name

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            {"role": "user", "content": "–ù–∞—á–Ω–∏ –∏–≥—Ä—É", "timestamp": datetime.now().isoformat()},
            {"role": "assistant", "content": response, "timestamp": datetime.now().isoformat()}
        ]
        chat_data['messages'] = messages

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç
        save_chat_file(chat_id, chat_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        session['conversation_history'] = messages

        return jsonify({
            "success": True,
            "response": response,
            "chat_name": chat_name,
            "game_started": True
        })

    return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É"})

@app.route('/save_game', methods=['POST'])
@login_required
def save_game():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É"""
    data = request.get_json()
    save_name = data.get('save_name', f"save_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
    chat_id = data.get('chat_id', 'default')

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–∞—Ç–∞
    chat_data = load_chat_data(chat_id)
    if not chat_data:
        return jsonify({"error": "–î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"})

    conversation_history = chat_data.get('messages', [])
    character = chat_data.get('character')
    character_name = chat_data.get('character_name', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂")

    save_data = {
        "timestamp": datetime.now().isoformat(),
        "conversation_history": conversation_history,
        "character": character,
        "character_name": character_name,
        "save_name": save_name,
        "chat_id": chat_id
    }

    user_folder = get_user_folder(session['username'], session['user_id'])
    saves_folder = os.path.join(user_folder, "saves")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É saves –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(saves_folder, exist_ok=True)
    
    save_path = os.path.join(saves_folder, f"{save_name}.json")

    try:
        with open(save_path, "w", encoding="utf-8") as f:
            json.dump(save_data, f, ensure_ascii=False, indent=2)

        return jsonify({"success": True, "message": "–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"})
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}"})

@app.route('/load_game', methods=['POST'])
@login_required
def load_game():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–≥—Ä—É"""
    data = request.get_json()
    filename = data.get('filename')

    if not filename:
        return jsonify({"error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞"})

    user_folder = get_user_folder(session['username'], session['user_id'])
    save_path = os.path.join(user_folder, "saves", f"{filename}.json")

    try:
        with open(save_path, "r", encoding="utf-8") as f:
            save_data = json.load(f)

        session['conversation_history'] = save_data.get('conversation_history', [])
        session['character'] = save_data.get('character', None)

        return jsonify({
            "success": True,
            "message": "–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
            "timestamp": save_data.get('timestamp'),
            "character": save_data.get('character'),
            "character_name": save_data.get('character_name'),
            "history": save_data.get('conversation_history', [])
        })

    except FileNotFoundError:
        return jsonify({"error": "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"})
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}"})

@app.route('/delete_character', methods=['POST'])
@login_required
def delete_character():
    """–£–¥–∞–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    data = request.get_json()
    filename = data.get('filename')

    if not filename:
        return jsonify({"error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞"})

    user_folder = get_user_folder(session['username'], session['user_id'])
    filepath = os.path.join(user_folder, "characters", f"{filename}.json")

    try:
        if os.path.exists(filepath):
            os.remove(filepath)
            return jsonify({"success": True, "message": "–ü–µ—Ä—Å–æ–Ω–∞–∂ —É–¥–∞–ª–µ–Ω"})
        else:
            return jsonify({"error": "–§–∞–π–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"})
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {str(e)}"})

@app.route('/get_character_by_id', methods=['POST'])
@login_required
def get_character_by_id_route():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID"""
    data = request.get_json()
    character_id = data.get('character_id')

    if not character_id:
        return jsonify({"error": "ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ —É–∫–∞–∑–∞–Ω"})

    character_data = get_character_by_id(character_id)
    if character_data:
        return jsonify({
            "success": True,
            "character": character_data['description'],
            "character_name": character_data['name']
        })
    else:
        return jsonify({"error": "–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"})

@app.route('/delete_save', methods=['POST'])
@login_required
def delete_save():
    """–£–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    data = request.get_json()
    filename = data.get('filename')

    if not filename:
        return jsonify({"error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞"})

    user_folder = get_user_folder(session['username'], session['user_id'])
    filepath = os.path.join(user_folder, "saves", f"{filename}.json")

    try:
        if os.path.exists(filepath):
            os.remove(filepath)
            return jsonify({"success": True, "message": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"})
        else:
            return jsonify({"error": "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"})
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}"})

@app.route('/upload_character', methods=['POST'])
@login_required
def upload_character():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–º–µ–Ω–µ–º"""
    data = request.get_json()
    file_content = data.get('file_content')
    character_name = data.get('character_name', '').strip()

    if not file_content:
        return jsonify({"error": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ"})

    if not character_name:
        return jsonify({"error": "–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"})

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        try:
            character_data = json.loads(file_content)
            # –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            character_description = format_character_description(character_data)
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ –Ω–µ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            character_description = file_content

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        filename = save_character_to_file(character_description, character_name)

        if filename:
            return jsonify({
                "success": True, 
                "character": character_description,
                "character_name": character_name,
                "filename": filename,
                "message": f"–ü–µ—Ä—Å–æ–Ω–∞–∂ '{character_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            })
        else:
            return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"})

    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"})

def format_character_description(character_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ JSON –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    if isinstance(character_data, dict):
        description = "=== –ü–ï–†–°–û–ù–ê–ñ ===\n"

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if 'name' in character_data:
            description += f"–ò–º—è: {character_data['name']}\n"
        if 'race' in character_data:
            description += f"–†–∞—Å–∞: {character_data['race']}\n"
        if 'class' in character_data:
            description += f"–ö–ª–∞—Å—Å: {character_data['class']}\n"
        if 'level' in character_data:
            description += f"–£—Ä–æ–≤–µ–Ω—å: {character_data['level']}\n"

        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        if 'stats' in character_data:
            description += "\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
            for stat, value in character_data['stats'].items():
                description += f"- {stat}: {value}\n"

        # –ù–∞–≤—ã–∫–∏
        if 'skills' in character_data:
            description += "\n–ù–∞–≤—ã–∫–∏:\n"
            for skill in character_data['skills']:
                description += f"- {skill}\n"

        # –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
        if 'equipment' in character_data:
            description += "\n–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:\n"
            for item in character_data['equipment']:
                description += f"- {item}\n"

        # –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è
        if 'background' in character_data:
            description += f"\n–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è: {character_data['background']}\n"

        return description

    return str(character_data)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()
os.makedirs("user_data", exist_ok=True)

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == 'web':
        print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://0.0.0.0:5000")
        app.run(host='0.0.0.0', port=5000, debug=True)
    else:
        print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://0.0.0.0:5000")
        app.run(host='0.0.0.0', port=5000, debug=True)