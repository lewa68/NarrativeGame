import pip
pip.main(['install', 'flask'])
import requests
import json
import os
from flask import Flask, render_template, request, jsonify, session
import secrets
from datetime import datetime

API_KEY = os.environ.get("OPENROUTER_API_KEY", "")
MODEL = "deepseek/deepseek-r1"

app = Flask(__name__)
app.secret_key = secrets.token_hex(16)

class ContextManager:
    def __init__(self, max_tokens=8000, summary_threshold=15):
        self.max_tokens = max_tokens
        self.summary_threshold = summary_threshold
        
    def estimate_tokens(self, text):
        """–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ (1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ)"""
        return len(text) // 3
    
    def create_summary(self, messages):
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        summary_messages = []
        for msg in messages:
            if msg["role"] == "user":
                summary_messages.append(f"–ò–≥—Ä–æ–∫: {msg['content'][:100]}...")
            else:
                summary_messages.append(f"–ì–ú: {msg['content'][:200]}...")
        
        return {
            "role": "system", 
            "content": f"–†–ï–ó–Æ–ú–ï –ü–†–ï–î–´–î–£–©–ò–• –°–û–ë–´–¢–ò–ô:\n" + "\n".join(summary_messages[-5:])
        }
    
    def optimize_context(self, conversation_history):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç, –±–∞–ª–∞–Ω—Å–∏—Ä—É—è –ø–æ–ª–Ω–æ—Ç—É –∏ —Ä–∞–∑–º–µ—Ä"""
        if len(conversation_history) <= 6:
            return conversation_history
            
        total_tokens = sum(self.estimate_tokens(msg["content"]) for msg in conversation_history)
        
        if total_tokens <= self.max_tokens:
            return conversation_history
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        recent_messages = conversation_history[-8:]
        older_messages = conversation_history[:-8]
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if older_messages:
            summary = self.create_summary(older_messages)
            return [summary] + recent_messages
            
        return recent_messages

def load_gm_rules():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ì–ú –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open("attached_assets/2. –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≥–µ–π–º –º–∞—Å—Ç–µ—Ä–∞_1751298976539.json", "r", encoding="utf-8") as f:
            rules = json.load(f)
        return rules
    except FileNotFoundError:
        print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –§–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ì–ú –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

def create_gm_system_prompt(rules):
    """–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ì–ú –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª"""
    if not rules:
        return ""
    
    system_prompt = """–¢—ã - –ì–µ–π–º –ú–∞—Å—Ç–µ—Ä (–ì–ú) –¥–ª—è –Ω–∞—Ä—Ä–∞—Ç–∏–≤–Ω–æ–π —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤–µ—Å—Ç–∏ –∏–≥—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:

–ü–†–ê–í–ò–õ–ê –ò–ì–†–´:
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ JSON
    for category, content in rules["rules"].items():
        system_prompt += f"\n{category.upper().replace('_', ' ')}:\n"
        if isinstance(content, dict):
            for key, value in content.items():
                if isinstance(value, list):
                    system_prompt += f"- {key}: {', '.join(value)}\n"
                else:
                    system_prompt += f"- {key}: {value}\n"
        else:
            system_prompt += f"- {content}\n"
    
    system_prompt += """
–í–ê–ñ–ù–û:
- –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–≥ '–ì–ú:', —Ç—ã –º–æ–∂–µ—à—å —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å –º–∏—Ä, NPC –∏ –∏—Ö –¥–µ–π—Å—Ç–≤–∏—è
- –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∏—Ö –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç
- –ú–∏—Ä –∂–∏–≤–µ—Ç —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏–≥—Ä–æ–∫–∞
- –í—Å–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
- –°–æ–≥–ª–∞—Å–∏–µ –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    
    return system_prompt

def process_content(content):
    # –ë–æ–ª–µ–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–æ–≤ –º—ã—à–ª–µ–Ω–∏—è
    import re
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ <think>...</think>, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç
    cleaned = re.sub(r'<think>.*?</think>', '', content, flags=re.DOTALL | re.IGNORECASE)
    # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'\n\s*\n', '\n', cleaned)
    cleaned = cleaned.strip()
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if len(content) > len(cleaned) + 100:  # –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        print(f"[DEBUG] –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω –±–æ–ª—å—à–æ–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞!")
        print(f"[DEBUG] –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞—á–∞–ª–æ: {content[:200]}...")
        print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {cleaned[:200]}...")
    
    return cleaned

def chat_with_ai(prompt, system_prompt="", conversation_history=[]):
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context_manager = ContextManager()
    optimized_history = context_manager.optimize_context(conversation_history)

    messages = []
    if system_prompt:
        messages.append({"role": "system", "content": system_prompt})
    
    messages.extend(optimized_history)
    messages.append({"role": "user", "content": prompt})

    data = {
        "model": MODEL,
        "messages": messages,
        "stream": False
    }

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=data,
            timeout=30
        )
        
        if response.status_code != 200:
            return f"–û—à–∏–±–∫–∞ API: {response.status_code}"

        result = response.json()
        content = result["choices"][0]["message"]["content"]
        processed_content = process_content(content)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"[DEBUG] –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–∞: {len(content)}")
        print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–∞: {len(processed_content)}")
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º –∏–ª–∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π
        if not processed_content or len(processed_content) < 10:
            print(f"[DEBUG] –í–ù–ò–ú–ê–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π")
            return content
        
        return processed_content
    
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/start_game', methods=['POST'])
def start_game():
    if not API_KEY:
        return jsonify({"error": "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ OPENROUTER_API_KEY –≤ Secrets."})
    
    rules = load_gm_rules()
    system_prompt = create_gm_system_prompt(rules)
    
    session['conversation_history'] = []
    session['system_prompt'] = system_prompt
    session['character'] = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
    if 'character' not in session or not session['character']:
        response = "üé≠ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!**\n\n–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –£ –≤–∞—Å –µ—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞:\n\n1. **–ó–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ç–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞** - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤—ã—à–µ\n2. **–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞** - –Ω–∞–ø–∏—à–∏—Ç–µ '—Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –≥–µ—Ä–æ—è\n\n–ß—Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ?"
    else:
        character_info = session['character']
        response = chat_with_ai(f"–ù–∞—á–Ω–∏ –∏–≥—Ä—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character_info}", system_prompt, [])
    
    if response and response.strip():
        session['conversation_history'] = [
            {"role": "user", "content": "–ù–∞—á–Ω–∏ –∏–≥—Ä—É"},
            {"role": "assistant", "content": response}
        ]
    
    return jsonify({"response": response})

@app.route('/send_message', methods=['POST'])
def send_message():
    data = request.get_json()
    user_message = data.get('message', '')
    
    if not user_message:
        return jsonify({"error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if '—Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' in user_message.lower() or '—Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' in user_message.lower():
        return create_character_start()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
    if not session.get('character'):
        return jsonify({
            "response": "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –ù–∞–ø–∏—à–∏—Ç–µ '—Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞."
        })
    
    conversation_history = session.get('conversation_history', [])
    system_prompt = session.get('system_prompt', '')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    character_info = session.get('character')
    enhanced_prompt = f"{user_message}\n\n[–ü–ï–†–°–û–ù–ê–ñ –ò–ì–†–û–ö–ê: {character_info}]"
    
    response = chat_with_ai(enhanced_prompt, system_prompt, conversation_history)
    
    if response and response.strip():
        conversation_history.extend([
            {"role": "user", "content": user_message},
            {"role": "assistant", "content": response}
        ])
        session['conversation_history'] = conversation_history
    
    return jsonify({"response": response})

def create_character_start():
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    session['character_creation_history'] = []
    
    response = """üé≠ **–°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê**

–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –Ø –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å.

**–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:** –ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –≤ –∫–∞–∫–æ–º –º–∏—Ä–µ –∏–ª–∏ —Å–µ—Ç—Ç–∏–Ω–≥–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–≥—Ä–∞—Ç—å? (—Ñ—ç–Ω—Ç–µ–∑–∏, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å, –∫–∏–±–µ—Ä–ø–∞–Ω–∫, –∫–æ—Å–º–æ—Å –∏ —Ç.–¥.)"""
    
    return jsonify({
        "response": response,
        "character_creation": True
    })

@app.route('/save_game', methods=['POST'])
def save_game():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É"""
    conversation_history = session.get('conversation_history', [])
    character = session.get('character')
    save_data = {
        "timestamp": datetime.now().isoformat(),
        "conversation_history": conversation_history,
        "character": character
    }
    
    with open("game_save.json", "w", encoding="utf-8") as f:
        json.dump(save_data, f, ensure_ascii=False, indent=2)
    
    return jsonify({"message": "–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"})

@app.route('/load_game', methods=['POST'])
def load_game():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–≥—Ä—É"""
    try:
        with open("game_save.json", "r", encoding="utf-8") as f:
            save_data = json.load(f)
        
        session['conversation_history'] = save_data.get('conversation_history', [])
        session['character'] = save_data.get('character', None)
        return jsonify({"message": "–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "timestamp": save_data.get('timestamp')})
    
    except FileNotFoundError:
        return jsonify({"error": "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"})

@app.route('/upload_character', methods=['POST'])
def upload_character():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    if 'character_file' not in request.files:
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"})
    
    file = request.files['character_file']
    if file.filename == '':
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"})
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = file.read().decode('utf-8')
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        try:
            character_data = json.loads(content)
            # –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            character_description = format_character_description(character_data)
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ –Ω–µ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            character_description = content
        
        session['character'] = character_description
        return jsonify({"message": "–ü–µ—Ä—Å–æ–Ω–∞–∂ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ", "character": character_description})
    
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"})

@app.route('/create_character', methods=['POST'])
def create_character():
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ì–ú"""
    data = request.get_json()
    user_input = data.get('input', '')
    
    system_prompt = session.get('system_prompt', '')
    creation_history = session.get('character_creation_history', [])
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character_creation_prompt = f"""
{system_prompt}

–†–ï–ñ–ò–ú –°–û–ó–î–ê–ù–ò–Ø –ü–ï–†–°–û–ù–ê–ñ–ê:
–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –∏–≥—Ä–æ–∫—É —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ:
- –ò–º–µ–Ω–∏ –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
- –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ  
- –ù–∞–≤—ã–∫–∞—Ö –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è—Ö
- –°–Ω–∞—Ä—è–∂–µ–Ω–∏–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö

–ö–æ–≥–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤, –∑–∞–≤–µ—Ä—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
=== –ü–ï–†–°–û–ù–ê–ñ –°–û–ó–î–ê–ù ===
[–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞]
=== –ö–û–ù–ï–¶ –û–ü–ò–°–ê–ù–ò–Ø ===
"""
    
    response = chat_with_ai(user_input, character_creation_prompt, creation_history)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if "=== –ü–ï–†–°–û–ù–ê–ñ –°–û–ó–î–ê–ù ===" in response:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        start_marker = "=== –ü–ï–†–°–û–ù–ê–ñ –°–û–ó–î–ê–ù ==="
        end_marker = "=== –ö–û–ù–ï–¶ –û–ü–ò–°–ê–ù–ò–Ø ==="
        
        start_idx = response.find(start_marker) + len(start_marker)
        end_idx = response.find(end_marker)
        
        if end_idx > start_idx:
            character_description = response[start_idx:end_idx].strip()
            session['character'] = character_description
            session.pop('character_creation_history', None)  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–∏—è
            
            return jsonify({
                "response": response,
                "character_created": True,
                "character": character_description
            })
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
    creation_history.extend([
        {"role": "user", "content": user_input},
        {"role": "assistant", "content": response}
    ])
    session['character_creation_history'] = creation_history
    
    return jsonify({"response": response, "character_created": False})

def format_character_description(character_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ JSON –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    if isinstance(character_data, dict):
        description = "=== –ü–ï–†–°–û–ù–ê–ñ ===\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if 'name' in character_data:
            description += f"–ò–º—è: {character_data['name']}\n"
        if 'race' in character_data:
            description += f"–†–∞—Å–∞: {character_data['race']}\n"
        if 'class' in character_data:
            description += f"–ö–ª–∞—Å—Å: {character_data['class']}\n"
        if 'level' in character_data:
            description += f"–£—Ä–æ–≤–µ–Ω—å: {character_data['level']}\n"
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        if 'stats' in character_data:
            description += "\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
            for stat, value in character_data['stats'].items():
                description += f"- {stat}: {value}\n"
        
        # –ù–∞–≤—ã–∫–∏
        if 'skills' in character_data:
            description += "\n–ù–∞–≤—ã–∫–∏:\n"
            for skill in character_data['skills']:
                description += f"- {skill}\n"
        
        # –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
        if 'equipment' in character_data:
            description += "\n–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:\n"
            for item in character_data['equipment']:
                description += f"- {item}\n"
        
        # –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è
        if 'background' in character_data:
            description += f"\n–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è: {character_data['background']}\n"
        
        return description
    
    return str(character_data)

# –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
def console_main():
    if not API_KEY:
        print("‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ OPENROUTER_API_KEY –≤ Secrets.")
        return
        
    rules = load_gm_rules()
    system_prompt = create_gm_system_prompt(rules)
    
    print("‚ïî" + "="*78 + "‚ïó")
    print("‚ïë" + " "*25 + "–ù–ê–†–†–ê–¢–ò–í–ù–ê–Ø –†–û–õ–ï–í–ê–Ø –ò–ì–†–ê" + " "*25 + "‚ïë")
    print("‚ïë" + " "*78 + "‚ïë")
    print("‚ïë  ü§ñ –ì–ú: DeepSeek-R1 (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è RPG)" + " "*14 + "‚ïë")
    print("‚ïë  üìù –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'" + " "*41 + "‚ïë")
    print("‚ïë  üåê –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py web" + " "*23 + "‚ïë")
    print("‚ïö" + "="*78 + "‚ïù")
    
    conversation_history = []
    context_manager = ContextManager()
    
    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ì–ú
    print("\nüé≤ –ì–ï–ô–ú –ú–ê–°–¢–ï–†:")
    print("-" * 40)
    first_response = chat_with_ai("–ù–∞—á–Ω–∏ –∏–≥—Ä—É", system_prompt, conversation_history)
    print(first_response)
    
    if first_response:
        conversation_history.extend([
            {"role": "user", "content": "–ù–∞—á–Ω–∏ –∏–≥—Ä—É"},
            {"role": "assistant", "content": first_response}
        ])

    while True:
        print("\nüéÆ –í–ê–® –•–û–î:")
        print("-" * 20)
        user_input = input(">>> ")

        if user_input.lower() == 'exit':
            print("\nüö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üé≤")
            break

        print("\n" + "="*80 + "\n")
        print("üé≤ –ì–ï–ô–ú –ú–ê–°–¢–ï–†:")
        print("-" * 40)
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        conversation_history = context_manager.optimize_context(conversation_history)
        
        response = chat_with_ai(user_input, system_prompt, conversation_history)
        print(response)
        
        if response:
            conversation_history.extend([
                {"role": "user", "content": user_input},
                {"role": "assistant", "content": response}
            ])

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == 'web':
        print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://0.0.0.0:5000")
        app.run(host='0.0.0.0', port=5000, debug=True)
    else:
        console_main()
